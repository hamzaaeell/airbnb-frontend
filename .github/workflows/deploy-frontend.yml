name: Deploy Frontend to AWS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ASG_NAME: ${{ secrets.FRONTEND_ASG_NAME }}
  ECR_REPOSITORY: ${{ secrets.FRONTEND_ECR_REPOSITORY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=latest
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

          echo "Building Docker image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

          # Also push commit SHA for rollback capability
          docker tag $IMAGE_URI ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Prepare user-data script
        run: |
          cat > user-data.sh <<'EOF'
          #!/bin/bash
          set -euo pipefail

          apt-get update -y
          apt-get install -y ca-certificates curl gnupg unzip lsb-release git nginx jq docker.io

          systemctl enable docker
          systemctl start docker

          # AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -o awscliv2.zip
          ./aws/install
          rm -rf awscliv2.zip aws

          # Node.js 18
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs

          # Amazon SSM Agent
          snap install amazon-ssm-agent --classic
          systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
          systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service

          mkdir -p /opt/djangobnb-frontend
          chown ubuntu:ubuntu /opt/djangobnb-frontend

          # Get region using IMDSv2
          TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          REGION=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"

          # Login & pull
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/ECR_REPOSITORY_VALUE:latest

          # Restart container
          docker stop frontend-container 2>/dev/null || true
          docker rm frontend-container 2>/dev/null || true
          docker run -d --name frontend-container --restart=always -p 3000:3000 \
            -e NEXT_PUBLIC_API_HOST=http://dev-djangobnb-alb-720056700.us-east-1.elb.amazonaws.com \
            -e ENVIRONMENT=dev \
            $ECR_REGISTRY/ECR_REPOSITORY_VALUE:latest

          # Nginx reverse proxy
          cat > /etc/nginx/sites-available/default << 'NGINX_EOF'
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINX_EOF

          systemctl restart nginx
          systemctl enable nginx
          EOF

          sed -i "s/ECR_REPOSITORY_VALUE/${{ env.ECR_REPOSITORY }}/g" user-data.sh

          USER_DATA=$(base64 -w 0 user-data.sh)
          echo "USER_DATA=$USER_DATA" >> $GITHUB_ENV

      - name: Update Launch Template
        run: |
          LAUNCH_TEMPLATE_ID=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $ASG_NAME \
            --query 'AutoScalingGroups[0].LaunchTemplate.LaunchTemplateId' \
            --output text)

          echo "Updating Launch Template: $LAUNCH_TEMPLATE_ID"

          aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --source-version '$Latest' \
            --launch-template-data "{\"UserData\":\"$USER_DATA\"}"

      - name: Refresh Auto Scaling Group
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"InstanceWarmup":300,"MinHealthyPercentage":50}'